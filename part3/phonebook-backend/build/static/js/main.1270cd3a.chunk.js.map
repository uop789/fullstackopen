{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","props","value","searchName","onChange","handleSearchName","PersonForm","onSubmit","addPerson","newName","handleNameChange","type","newNumber","handleNumberChange","Persons","personToShow","map","person","key","id","name","number","onClick","handleDelete","baseUrl","axios","get","then","response","data","newObject","post","delete","put","Notification","message","successfulMessgae","errorMessage","className","App","useState","persons","setPersons","setNewName","setNewNumber","setSearchName","showAll","setShowAll","setSuccessfulMessgae","setErrorMessage","useEffect","personService","initialPersons","filter","toLowerCase","includes","event","target","preventDefault","window","confirm","find","changedPerson","returnedPerson","p","setTimeout","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1270cd3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = props => {\r\n  return (\r\n    <p>\r\n      {`filter shown with `}\r\n      <input value={props.searchName} onChange={props.handleSearchName} />\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = props => {\r\n  return (\r\n    <form onSubmit={props.addPerson}>\r\n      <p>\r\n        name: <input value={props.newName} onChange={props.handleNameChange} />\r\n      </p>\r\n      <p>\r\n        {`number: `}\r\n        <input\r\n          type=\"tel\"\r\n          value={props.newNumber}\r\n          onChange={props.handleNumberChange}\r\n        />\r\n      </p>\r\n      <button type=\"submit\">add</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst Persons = props => {\r\n  return props.personToShow.map(person => (\r\n    <p key={person.id}>\r\n      {`${person.name} ${person.number} `}\r\n      <button onClick={() => props.handleDelete(person.id, person.name)}>\r\n        delete\r\n      </button>\r\n    </p>\r\n  ));\r\n};\r\n\r\nexport default Persons;\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl).then(response => {\r\n    return response.data;\r\n  });\r\n};\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject).then(response => {\r\n    return response.data;\r\n  });\r\n};\r\n\r\nconst deleteRecord = id => {\r\n  return axios.delete(`${baseUrl}/${id}`).then(response => {\r\n    return response.data;\r\n  });\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject).then(response => {\r\n    return response.data;\r\n  });\r\n};\r\n\r\nexport default { getAll, create, deleteRecord, update };\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message, successfulMessgae, errorMessage }) => {\r\n  if (message === null) {\r\n    return null;\r\n  } else if (message === successfulMessgae) {\r\n    return <div className=\"successful\">{message}</div>;\r\n  } else if (message === errorMessage) {\r\n    return <div className=\"error\">{message}</div>;\r\n  }\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personService from './services/persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [searchName, setSearchName] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [successfulMessgae, setSuccessfulMessgae] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const personToShow = showAll\n    ? persons\n    : persons.filter(person =>\n        person.name.toLowerCase().includes(searchName.toLowerCase())\n      );\n\n  const addPerson = event => {\n    event.preventDefault();\n    const nameArr = persons.map(person => person.name);\n    if (!nameArr.includes(newName)) {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      };\n      personService.create(personObject).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n        setNewName('');\n        setNewNumber('');\n        setSuccessfulMessgae(`Added ${returnedPerson.name}`);\n        setTimeout(() => {\n          setSuccessfulMessgae(null);\n        }, 5000);\n      });\n    } else {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const person = persons.find(person => person.name === newName);\n        const changedPerson = { ...person, number: newNumber };\n        personService\n          .update(person.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(\n              persons.map(p => (p.id !== person.id ? p : returnedPerson))\n            );\n            setSuccessfulMessgae(`Number of ${returnedPerson.name} changed`);\n            setTimeout(() => {\n              setSuccessfulMessgae(null);\n            }, 5000);\n          })\n          .catch(error => {\n            setErrorMessage(\n              `Information of ${newName} has already been removed from server`\n            );\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 5000);\n          });\n      } else {\n        setNewName('');\n        setNewNumber('');\n      }\n    }\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchName = event => {\n    setSearchName(event.target.value);\n    if (event.target.value === '') {\n      setShowAll(true);\n    } else setShowAll(false);\n  };\n\n  const handleDeleteOf = (id, name) => {\n    if (window.confirm(`Delete ${name} ?`)) {\n      personService\n        .deleteRecord(id)\n        .then(setPersons(persons.filter(person => person.id !== id)));\n    }\n  };\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification\n        message={successfulMessgae || errorMessage}\n        successfulMessgae={successfulMessgae}\n        errorMessage={errorMessage}\n      />\n      <Filter searchName={searchName} handleSearchName={handleSearchName} />\n      <h3>add a new</h3>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      <Persons personToShow={personToShow} handleDelete={handleDeleteOf} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}